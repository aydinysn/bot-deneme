#!/usr/bin/env python3
"""
ML Fiyat Tahmin Modeli Entegrasyon √ñrneƒüi (Python 3.13 Uyumlu)

Bu dosya, mevcut trading botunuza ML fiyat tahmin modelini nasƒ±l entegre 
edeceƒüinizi g√∂steren bir √∂rnektir. TensorFlow olmadan √ßalƒ±≈üƒ±r.
"""

import asyncio
import logging
from datetime import datetime
import sys
import os

# Parent dizini path'e ekle (config.py i√ßin)
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from binance.client import Client
import pandas as pd

# ML mod√ºllerini import et
from ml_models import MLPricePredictor, ModelTrainer, DataPreprocessor
import config

# Logger ayarla
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MLTradingBot:
    """
    ML tahmin modeli ile g√º√ßlendirilmi≈ü trading bot
    Python 3.13 uyumlu, TensorFlow gerektirmez
    """
    
    def __init__(self):
        # Binance client
        self.client = Client(config.API_KEY, config.API_SECRET)
        
        # ML model trainer
        self.model_trainer = ModelTrainer(self.client)
        
        # Aktif coin listesi
        self.active_coins = []
        
        # ML tahminleri cache
        self.predictions_cache = {}
        
        logger.info("ML Trading Bot ba≈ülatƒ±ldƒ± (Python 3.13 uyumlu)")
    
    async def initialize_models(self):
        """
        Modelleri ba≈ülat - kayƒ±tlƒ± modelleri y√ºkle veya eƒüit
        """
        logger.info("ML modelleri ba≈ülatƒ±lƒ±yor...")
        
        # Coin listesini y√ºkle
        with open(config.COIN_LIST_FILE, 'r') as f:
            import json
            coin_data = json.load(f)
            # Format d√ºzeltmesi - Binance formatƒ±na √ßevir
            if 'coins' in coin_data:
                self.active_coins = [coin.replace('/', '') for coin in coin_data['coins'][:5]]  # ƒ∞lk 5 coin ile test
            else:
                self.active_coins = [coin['symbol'] for coin in coin_data][:5]  # ƒ∞lk 5 coin ile test
        
        logger.info(f"Test i√ßin {len(self.active_coins)} coin se√ßildi: {self.active_coins}")
        
        # Mevcut modelleri y√ºkle
        loaded_count = self.model_trainer.load_existing_models()
        
        if loaded_count == 0:
            logger.info("Hi√ß model bulunamadƒ±, yeni modeller eƒüitiliyor...")
            await self.train_all_models()
        else:
            logger.info(f"{loaded_count} model y√ºklendi")
            
            # Modelleri g√ºncelleme gerekiyor mu kontrol et
            await self.check_model_updates()
    
    async def train_all_models(self):
        """
        T√ºm coinler i√ßin ML modellerini eƒüit
        """
        if not config.ML_ENABLED:
            logger.info("ML modeli devre dƒ±≈üƒ±")
            return
        
        logger.info(f"{len(self.active_coins)} coin i√ßin model eƒüitimi ba≈ülatƒ±lƒ±yor...")
        
        # Eƒüitimi sƒ±rayla yap (API limit'i i√ßin)
        results = self.model_trainer.train_all_models(self.active_coins)
        
        success_count = sum(results.values())
        logger.info(f"Model eƒüitimi tamamlandƒ±: {success_count}/{len(self.active_coins)}")
        
        return results
    
    async def check_model_updates(self):
        """
        Modellerin g√ºncellenme ihtiyacƒ±nƒ± kontrol et
        """
        for symbol in self.active_coins:
            if self.model_trainer.retrain_model_if_needed(
                symbol, config.ML_RETRAIN_INTERVAL_HOURS
            ):
                logger.info(f"{symbol} modeli g√ºncellendi")
    
    async def get_ml_signal(self, symbol: str, current_data: pd.DataFrame) -> dict:
        """
        Belirli bir coin i√ßin ML sinyali al
        """
        if not config.ML_ENABLED:
            return {'score': 0, 'direction': 'NEUTRAL', 'confidence': 0}
        
        try:
            # ML tahminini al
            prediction = self.model_trainer.get_prediction(
                symbol, config.ML_PREDICTION_STEPS
            )
            
            if not prediction:
                return {'score': 0, 'direction': 'NEUTRAL', 'confidence': 0}
            
            # Cache'e kaydet
            self.predictions_cache[symbol] = prediction
            
            # Mevcut fiyat ve tahmin edilen fiyatlarƒ± kar≈üƒ±la≈ütƒ±r
            current_price = prediction['current_price']
            next_predictions = prediction['predictions']
            model_confidence = prediction['model_confidence']
            
            # Sinyal hesapla
            if len(next_predictions) > 0:
                # Kƒ±sa vadeli tahmin (1 adƒ±m sonrasƒ±)
                next_price = next_predictions[0]
                price_change_percent = ((next_price - current_price) / current_price) * 100
                
                # Uzun vadeli trend (t√ºm tahminler)
                if len(next_predictions) >= 2:
                    long_term_trend = (next_predictions[-1] - current_price) / current_price * 100
                else:
                    long_term_trend = price_change_percent
                
                # Sinyal y√∂n√º ve g√ºc√º
                if price_change_percent > 1.0:  # %1'den fazla y√ºkseli≈ü
                    direction = 'LONG'
                    signal_strength = min(abs(price_change_percent) * 10, 100)
                elif price_change_percent < -1.0:  # %1'den fazla d√º≈ü√º≈ü
                    direction = 'SHORT'
                    signal_strength = min(abs(price_change_percent) * 10, 100)
                else:
                    direction = 'NEUTRAL'
                    signal_strength = 0
                
                # Model g√ºvenini dahil et
                final_score = signal_strength * model_confidence
                
                # Minimum e≈üiƒüi kontrol et
                if model_confidence < config.ML_MIN_CONFIDENCE:
                    final_score = 0
                    direction = 'NEUTRAL'
                
                return {
                    'score': final_score,
                    'direction': direction,
                    'confidence': model_confidence,
                    'price_change_percent': price_change_percent,
                    'predicted_price': next_price,
                    'long_term_trend': long_term_trend,
                    'predictions': next_predictions,
                    'model_type': prediction.get('model_type', 'unknown'),
                    'best_model': prediction.get('best_model', 'unknown')
                }
            
        except Exception as e:
            logger.error(f"{symbol} ML sinyal hatasƒ±: {e}")
        
        return {'score': 0, 'direction': 'NEUTRAL', 'confidence': 0}
    
    def integrate_ml_with_existing_signals(self, symbol: str, 
                                         existing_score: float,
                                         ml_signal: dict) -> float:
        """
        ML sinyalini mevcut sinyal sistemiyle entegre et
        """
        if not config.ML_ENABLED or ml_signal['score'] == 0:
            return existing_score
        
        # ML aƒüƒ±rlƒ±ƒüƒ±nƒ± uygula
        ml_contribution = ml_signal['score'] * config.ML_PREDICTION_WEIGHT
        
        # Sinyal y√∂nleri uyumlu mu kontrol et
        if existing_score > 50 and ml_signal['direction'] == 'LONG':
            # Aynƒ± y√∂nde g√º√ßlendirme
            enhanced_score = existing_score + ml_contribution
        elif existing_score < 50 and ml_signal['direction'] == 'SHORT':
            # Aynƒ± y√∂nde g√º√ßlendirme  
            enhanced_score = existing_score - ml_contribution
        else:
            # Farklƒ± y√∂nlerde - daha konservatif yakla≈üƒ±m
            enhanced_score = existing_score * (1 - config.ML_PREDICTION_WEIGHT * 0.5)
        
        # Sƒ±nƒ±rlara dahil et
        enhanced_score = max(0, min(100, enhanced_score))
        
        logger.debug(f"{symbol}: Orijinal skor {existing_score:.2f}, "
                    f"ML katkƒ±sƒ± {ml_contribution:.2f}, "
                    f"Final skor {enhanced_score:.2f}")
        
        return enhanced_score
    
    async def get_ml_price_targets(self, symbol: str) -> dict:
        """
        ML tahminlerine g√∂re fiyat hedeflerini hesapla
        """
        if symbol not in self.predictions_cache:
            return {}
        
        prediction = self.predictions_cache[symbol]
        current_price = prediction['current_price']
        predictions = prediction['predictions']
        
        if not predictions:
            return {}
        
        # Take profit ve stop loss seviyelerini hesapla
        max_predicted = max(predictions)
        min_predicted = min(predictions)
        
        # ML bazlƒ± hedefler
        ml_targets = {
            'take_profit_price': max_predicted,
            'stop_loss_price': min_predicted,
            'confidence': prediction['confidence'],
            'prediction_horizon': len(predictions),
            'model_type': prediction.get('model_type', 'unknown')
        }
        
        return ml_targets
    
    async def send_ml_notification(self, symbol: str, prediction: dict):
        """
        ML tahmin bildirimini g√∂nder
        """
        if not config.NOTIFY_ML_PREDICTIONS:
            return
        
        try:
            current_price = prediction['current_price']
            next_price = prediction['predictions'][0] if prediction['predictions'] else current_price
            confidence = prediction['confidence']
            model_type = prediction.get('model_type', 'ensemble')
            best_model = prediction.get('best_model', 'unknown')
            
            change_percent = ((next_price - current_price) / current_price) * 100
            
            message = f"""
ü§ñ ML Fiyat Tahmini
üí∞ {symbol}
üìà Mevcut: ${current_price:.4f}
üîÆ Tahmin: ${next_price:.4f}
üìä Deƒüi≈üim: {change_percent:+.2f}%
üéØ G√ºven: {confidence:.1%}
üèÜ Model: {model_type} ({best_model})
‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            # Telegram'a g√∂nder (mevcut telegram fonksiyonunu kullan)
            # await self.send_telegram_message(message)
            logger.info(f"ML bildirimi: {symbol} {change_percent:+.2f}% (Model: {best_model})")
            
        except Exception as e:
            logger.error(f"ML bildirim hatasƒ±: {e}")
    
    async def get_model_performance_summary(self) -> dict:
        """
        T√ºm modellerin performans √∂zeti
        """
        performance_summary = self.model_trainer.get_model_comparison()
        
        if not performance_summary:
            return {}
        
        # Ortalama performans
        avg_mape = sum(p['test_mape'] for p in performance_summary.values()) / len(performance_summary)
        best_performer = min(performance_summary.items(), key=lambda x: x[1]['test_mape'])
        worst_performer = max(performance_summary.items(), key=lambda x: x[1]['test_mape'])
        
        summary = {
            'total_models': len(performance_summary),
            'average_mape': avg_mape,
            'best_performer': {
                'symbol': best_performer[0],
                'mape': best_performer[1]['test_mape'],
                'model': best_performer[1]['best_model']
            },
            'worst_performer': {
                'symbol': worst_performer[0],
                'mape': worst_performer[1]['test_mape'],
                'model': worst_performer[1]['best_model']
            },
            'models_breakdown': performance_summary
        }
        
        return summary

# Ana bot entegrasyonu i√ßin √∂rnek fonksiyon
async def enhanced_signal_calculation(symbol: str, market_data: pd.DataFrame, 
                                    ml_bot: MLTradingBot) -> float:
    """
    Mevcut sinyal hesaplamasƒ±na ML entegrasyonu √∂rneƒüi
    Bu fonksiyonu main.py'daki mevcut sinyal hesaplama fonksiyonunuza adapte edin
    """
    
    # 1. Mevcut teknik analiz sinyallerini hesapla (RSI, Bollinger, vb.)
    # existing_score = calculate_technical_signals(market_data)  # Mevcut fonksiyonunuz
    existing_score = 75.0  # √ñrnek deƒüer
    
    # 2. ML sinyalini al
    ml_signal = await ml_bot.get_ml_signal(symbol, market_data)
    
    # 3. ML ile entegre et
    final_score = ml_bot.integrate_ml_with_existing_signals(
        symbol, existing_score, ml_signal
    )
    
    # 4. ML bildirimini g√∂nder
    if ml_signal['score'] > 0:
        await ml_bot.send_ml_notification(symbol, ml_bot.predictions_cache.get(symbol, {}))
    
    return final_score

# Test fonksiyonu
async def test_ml_integration():
    """
    ML entegrasyonunu test et
    """
    bot = MLTradingBot()
    
    try:
        # Modelleri ba≈ülat
        await bot.initialize_models()
        
        # Test coin'i i√ßin tahmin al
        test_symbol = "BTCUSDT"
        
        # Son 200 saatlik veri al
        recent_data = bot.model_trainer.fetch_training_data(test_symbol, limit=200)
        
        if not recent_data.empty:
            # ML sinyali al
            ml_signal = await bot.get_ml_signal(test_symbol, recent_data)
            
            print(f"\n{test_symbol} ML Sinyali:")
            print(f"Skor: {ml_signal['score']:.2f}")
            print(f"Y√∂n: {ml_signal['direction']}")
            print(f"G√ºven: {ml_signal['confidence']:.2%}")
            print(f"Model Tipi: {ml_signal.get('model_type', 'unknown')}")
            print(f"En ƒ∞yi Model: {ml_signal.get('best_model', 'unknown')}")
            
            if 'predicted_price' in ml_signal:
                print(f"Tahmin edilen fiyat: ${ml_signal['predicted_price']:.2f}")
                print(f"Beklenen deƒüi≈üim: {ml_signal['price_change_percent']:+.2f}%")
        
        # Performans √∂zeti
        print("\n" + "="*50)
        performance = await bot.get_model_performance_summary()
        if performance:
            print(f"Toplam model sayƒ±sƒ±: {performance['total_models']}")
            print(f"Ortalama MAPE: {performance['average_mape']:.2f}%")
            print(f"En iyi performer: {performance['best_performer']['symbol']} "
                  f"({performance['best_performer']['mape']:.2f}%)")
        
    except Exception as e:
        logger.error(f"Test hatasƒ±: {e}")

if __name__ == "__main__":
    # Test √ßalƒ±≈ütƒ±r
    asyncio.run(test_ml_integration()) 